@page "/play"
@inject NavigationManager nav
@using Logic.Session
@using Logic.Game

<p>@key</p>

<h1>Play</h1>

@if (loaded && (character is not null)) {
    <button @onclick="saveCharacter">Save</button>
    <h2>@character.Name</h2>
    <p>@character.Description</p>
    <ul>
        <li>@character.Race</li>
        <li><input type="text" @bind="character.Height" /></li>
        <li><input type="text" @bind="character.Alignment" /> </li>
        <li>Level @character.Level</li>
        <li>@character.ReturnClassList()</li>
    </ul>

    <ul>
        <li>HP<input type="number" @bind="character.HP"/> / <input type="number" @bind="character.TotalHP"/></li>
        <li>AC <input type="number" @bind="character.AC"/></li>
        <li>Proficiency: @character.Proficiency</li>
    </ul>

    <ul>
    @foreach(string item in character.Inventory) {
        <li>@item</li>
    }
    </ul>
} else if (loaded) {
    <p>Invalid key(s).</p>
} else {
    <p>Loading...</p>
}

@code {
    bool loaded = false;

    Session? session;
    PlayerStats? character;

    [SupplyParameterFromQuery]
    public string? key { get; set; } // The session key
    [SupplyParameterFromQuery]
    public string? chardata { get; set; } // The key of the character

    protected override void OnAfterRender(bool firstRender)
    {
        session = SessionManager.Instance.GetSessionFromKey(key);
        character = session.GetCharacter(chardata);
        
        Action stateChange = () => {
            InvokeAsync(StateHasChanged);
        };
    

        if (session is not null) session.SessionUpdated += stateChange;

        loaded = true;

        InvokeAsync(StateHasChanged);
    }

    void saveCharacter()
    {
        session.UpdateSessionData();
    }
}
