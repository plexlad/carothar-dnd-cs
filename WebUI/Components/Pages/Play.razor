@page "/play"
@inject NavigationManager nav

<Nav key=@key />

<h1 class="w-full text-4xl text-center my-8 font-serif">Play</h1>

@if (loaded && (session is not null) && (character is not null)) {
    <p>Don't forget to press save!</p>
    <p>Press the Characters button to go back.</p>

    <button @onclick="saveCharacter">Save</button><br>
    <input type="text" @bind=@character.Name /><br>
    <input type="text" @bind=@character.Description />

    <ul>
        <li>@character.Race</li>
        <li><input type="text" @bind="character.Height" /></li>
        <li><input type="text" @bind="character.Alignment" /></li>
        <li>Level @character.Level</li>
        <li>@character.ReturnClassList()</li>
    </ul>

    <ul>
        <li>HP<input type="number" @bind="character.HP"/> / <input type="number" @bind="character.TotalHP"/></li>
        <li>AC <input type="number" @bind="character.AC"/></li>
        <li>Proficiency: @displayModifier(character.Proficiency)</li>
    </ul>

    <CascadingValue Value=@character>
        <STR />
        <DEX />
        <FORT />
        <INT />
        <WIS />
        <CHA />
    </CascadingValue>

    <button @onclick="saveCharacter">Save</button><br>

    <ul>
    @foreach(string item in character.Inventory) {
        <li>@item</li>
    }
    </ul>
} else if (loaded) {
    <p class="font-serif">Invalid key(s). Refresh this page or create a valid session.</p>
} else {
    <p>Loading...</p>
}

@code {
    string displayModifier(int value) {
        return value > 0 ? $"+{value}" : $"{value}";
    }

    bool loaded = false;

    Session? session;
    PlayerStats? character;

    [SupplyParameterFromQuery]
    public string? key { get; set; } // The session key
    [SupplyParameterFromQuery]
    public string? chardata { get; set; } // The key of the character

    protected override void OnInitialized()
    {
        session = SessionManager.Instance.GetSessionFromKey(key);
        character = session.GetCharacter(chardata);

        if (session is not null) session.SessionUpdated += () => InvokeAsync(StateHasChanged);

        loaded = true;
    }

    void saveCharacter()
    {
        session.UpdateSessionData();
    }
}
